@model EngLine.ViewModels.TestEditViewModel;

@{
	ViewData["Title"] = "Create Test";
}

<h1>Create Test</h1>

<h4>Test</h4>
<hr />
<div class="row">
	<div class="col-md-12">
		<form asp-action="Create">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			<div class="form-group">
				<label asp-for="Title" class="control-label"></label>
				<input asp-for="Title" class="form-control" />
				<span asp-validation-for="Title" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="TimeLimit" class="control-label"></label>
				<input asp-for="TimeLimit" class="form-control" />
				<span asp-validation-for="TimeLimit" class="text-danger"></span>
			</div>

			<h4>Questions</h4>
			<hr />
			<div id="questions-container">
				@for (int i = 0; i < Model.Questions.Count; i++)
				{
					<div class="question-form" data-index="@i">
						<div class="form-group">
							<label asp-for="Questions[i].Content" class="control-label"></label>
							<input asp-for="Questions[i].Content" class="form-control" />
							<span asp-validation-for="Questions[i].Content" class="text-danger"></span>
						</div>
						<h5>Answer Options</h5>
						<div class="answer-options-container">
							@for (int j = 0; j < Model.Questions[i].AnswerOptions.Count; j++)
							{
								<div class="answer-option-form" data-index="@j">
									<div class="form-group">
										<label asp-for="Questions[i].AnswerOptions[j].Content" class="control-label"></label>
										<input asp-for="Questions[i].AnswerOptions[j].Content" class="form-control" />
										<span asp-validation-for="Questions[i].AnswerOptions[j].Content" class="text-danger"></span>
									</div>
									<div class="form-group form-check">
										<input asp-for="Questions[i].AnswerOptions[j].IsCorrectOption" class="form-check-input" />
										<label asp-for="Questions[i].AnswerOptions[j].IsCorrectOption" class="form-check-label"></label>
									</div>
									<button type="button" class="btn btn-danger delete-answer-option">Delete Answer Option</button>
								</div>
							}
						</div>
						<button type="button" class="btn btn-secondary add-answer-option">Add Answer Option</button>
						<button type="button" class="btn btn-danger delete-question">Delete Question</button>
					</div>
				}
			</div>
			<button type="button" class="btn btn-secondary" id="add-question">Add Question</button>
			<button type="submit" class="btn btn-primary">Save</button>
		</form>
	</div>
</div>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script>
		$(document).ready(function () {
			let questionIndex = @Model.Questions.Count;

			// Function to add a new question form
			$('#add-question').click(function () {
				const newQuestionForm = `
									<div class="question-form" data-index="${questionIndex}">
										<div class="form-group">
											<label for="Questions_${questionIndex}__Content" class="control-label">Content</label>
											<input type="text" name="Questions[${questionIndex}].Content" class="form-control" />
											<span class="text-danger field-validation-valid" data-valmsg-for="Questions[${questionIndex}].Content" data-valmsg-replace="true"></span>
										</div>
										<h5>Answer Options</h5>
										<div class="answer-options-container"></div>
										<button type="button" class="btn btn-secondary add-answer-option">Add Answer Option</button>
										<button type="button" class="btn btn-danger delete-question">Delete Question</button>
									</div>
								`;
				$('#questions-container').append(newQuestionForm);
				questionIndex++;
			});

			// Function to add a new answer option form within a question form
			$(document).on('click', '.add-answer-option', function () {
				const questionForm = $(this).closest('.question-form');
				const questionIndex = questionForm.data('index');
				const answerOptionsContainer = questionForm.find('.answer-options-container');
				const answerOptionIndex = answerOptionsContainer.children().length;

				const newAnswerOptionForm = `
									<div class="answer-option-form" data-index="${answerOptionIndex}">
										<div class="form-group">
											<label for="Questions_${questionIndex}__AnswerOptions_${answerOptionIndex}__Content" class="control-label">Content</label>
											<input type="text" name="Questions[${questionIndex}].AnswerOptions[${answerOptionIndex}].Content" class="form-control" />
											<span class="text-danger field-validation-valid" data-valmsg-for="Questions[${questionIndex}].AnswerOptions[${answerOptionIndex}].Content" data-valmsg-replace="true"></span>
										</div>
										<div class="form-group form-check">
											<input type="checkbox" name="Questions[${questionIndex}].AnswerOptions[${answerOptionIndex}].IsCorrectOption" value="true" class="form-check-input" />
											<label for="Questions_${questionIndex}__AnswerOptions_${answerOptionIndex}__IsCorrectOption" class="form-check-label">Is Correct Option</label>
										</div>
										<button type="button" class="btn btn-danger delete-answer-option">Delete Answer Option</button>
									</div>
								`;
				answerOptionsContainer.append(newAnswerOptionForm);
			});

			// Function to delete a question form
			$(document).on('click', '.delete-question', function () {
				$(this).closest('.question-form').remove();
			});

			// Function to delete an answer option form
			$(document).on('click', '.delete-answer-option', function () {
				$(this).closest('.answer-option-form').remove();
			});
		});
	</script>
}
